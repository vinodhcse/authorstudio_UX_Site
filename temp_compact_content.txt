                {/* Content - Compact Design */}
                <div className="p-4 overflow-y-auto max-h-[70vh]" style={{ scrollbarWidth: 'none', msOverflowStyle: 'none' }}>
                    <style jsx>{`
                        div::-webkit-scrollbar {
                            display: none;
                        }
                    `}</style>
                    <div className="space-y-4">
                        
                        {/* Font Family - Full Width */}
                        <motion.div 
                            className="space-y-2"
                            initial={{ opacity: 0, y: 10 }}
                            animate={{ opacity: 1, y: 0 }}
                            transition={{ delay: 0.1 }}
                        >
                            <div className="flex items-center gap-2">
                                <svg className="w-3 h-3 text-gray-600 dark:text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 21h10M12 3v18M8 7h8" />
                                </svg>
                                <h3 className="font-medium text-gray-800 dark:text-gray-200 text-xs">Font Family</h3>
                            </div>
                            <select
                                value={settings.fontFamily}
                                onChange={(e) => setSettings({...settings, fontFamily: e.target.value})}
                                className="w-full p-2 text-xs border border-gray-300 dark:border-gray-600 rounded-md bg-white/70 dark:bg-gray-700/70 text-gray-800 dark:text-gray-200 backdrop-blur-sm transition-all duration-200"
                                style={{ fontFamily: settings.fontFamily }}
                            >
                                {fontFamilies.map((font) => (
                                    <option key={font.value} value={font.value} style={{ fontFamily: font.value }}>
                                        {font.name} {font.kdp && font.ingram ? '●●' : font.kdp ? '●○' : font.ingram ? '○●' : '○○'}
                                    </option>
                                ))}
                            </select>
                        </motion.div>

                        {/* Settings Grid - 3 columns for compactness */}
                        <div className="grid grid-cols-3 gap-3">
                            {/* Text Size */}
                            <motion.div 
                                className="space-y-2"
                                initial={{ opacity: 0, y: 10 }}
                                animate={{ opacity: 1, y: 0 }}
                                transition={{ delay: 0.2 }}
                            >
                                <div className="flex items-center gap-1">
                                    <svg className="w-3 h-3 text-gray-600 dark:text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4" />
                                    </svg>
                                    <h3 className="font-medium text-gray-800 dark:text-gray-200 text-xs">Size</h3>
                                </div>
                                <div className="grid grid-cols-2 gap-1">
                                    {[
                                        { name: 'S', value: 'text-sm' },
                                        { name: 'M', value: 'text-base' },
                                        { name: 'L', value: 'text-lg' },
                                        { name: 'XL', value: 'text-xl' },
                                    ].map((size) => (
                                        <motion.button
                                            key={size.value}
                                            onClick={() => setSettings({...settings, fontSize: size.value})}
                                            className={`p-1 rounded border transition-all duration-200 text-xs ${
                                                settings.fontSize === size.value
                                                    ? 'border-blue-500 bg-blue-50/80 dark:bg-blue-900/30 text-blue-600 dark:text-blue-400'
                                                    : 'border-gray-200/50 dark:border-gray-600/50 hover:border-gray-300 dark:hover:border-gray-500 bg-white/50 dark:bg-gray-700/50'
                                            }`}
                                            title={size.name}
                                            whileHover={{ scale: 1.05 }}
                                            whileTap={{ scale: 0.95 }}
                                        >
                                            <div className="font-bold">{size.name}</div>
                                        </motion.button>
                                    ))}
                                </div>
                            </motion.div>

                            {/* Text Alignment */}
                            <motion.div 
                                className="space-y-2"
                                initial={{ opacity: 0, y: 10 }}
                                animate={{ opacity: 1, y: 0 }}
                                transition={{ delay: 0.3 }}
                            >
                                <div className="flex items-center gap-1">
                                    <svg className="w-3 h-3 text-gray-600 dark:text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h8m-8 6h16" />
                                    </svg>
                                    <h3 className="font-medium text-gray-800 dark:text-gray-200 text-xs">Align</h3>
                                </div>
                                <div className="grid grid-cols-2 gap-1">
                                    {[
                                        { name: 'L', value: 'left', icon: '⬅' },
                                        { name: 'C', value: 'center', icon: '⬌' },
                                        { name: 'R', value: 'right', icon: '➡' },
                                        { name: 'J', value: 'justified', icon: '⬍' }
                                    ].map((align) => (
                                        <motion.button
                                            key={align.value}
                                            onClick={() => setSettings({...settings, textAlignment: align.value})}
                                            className={`p-1 rounded border transition-all duration-200 ${
                                                settings.textAlignment === align.value
                                                    ? 'border-blue-500 bg-blue-50/80 dark:bg-blue-900/30 text-blue-600 dark:text-blue-400'
                                                    : 'border-gray-200/50 dark:border-gray-600/50 hover:border-gray-300 dark:hover:border-gray-500 bg-white/50 dark:bg-gray-700/50'
                                            }`}
                                            title={align.name}
                                            whileHover={{ scale: 1.05 }}
                                            whileTap={{ scale: 0.95 }}
                                        >
                                            <div className="text-xs">{align.icon}</div>
                                        </motion.button>
                                    ))}
                                </div>
                            </motion.div>

                            {/* Text Indent */}
                            <motion.div 
                                className="space-y-2"
                                initial={{ opacity: 0, y: 10 }}
                                animate={{ opacity: 1, y: 0 }}
                                transition={{ delay: 0.4 }}
                            >
                                <div className="flex items-center gap-1">
                                    <svg className="w-3 h-3 text-gray-600 dark:text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4l-8 8 8 8" />
                                    </svg>
                                    <h3 className="font-medium text-gray-800 dark:text-gray-200 text-xs">Indent</h3>
                                </div>
                                <div className="grid grid-cols-2 gap-1">
                                    {[
                                        { name: '0', value: 'none', icon: '|' },
                                        { name: '1', value: 'small', icon: '|→' },
                                        { name: '2', value: 'medium', icon: '|⇒' },
                                        { name: '3', value: 'large', icon: '|⟶' }
                                    ].map((indent) => (
                                        <motion.button
                                            key={indent.value}
                                            onClick={() => setSettings({...settings, textIndent: indent.value})}
                                            className={`p-1 rounded border transition-all duration-200 ${
                                                settings.textIndent === indent.value
                                                    ? 'border-blue-500 bg-blue-50/80 dark:bg-blue-900/30 text-blue-600 dark:text-blue-400'
                                                    : 'border-gray-200/50 dark:border-gray-600/50 hover:border-gray-300 dark:hover:border-gray-500 bg-white/50 dark:bg-gray-700/50'
                                            }`}
                                            title={indent.name}
                                            whileHover={{ scale: 1.05 }}
                                            whileTap={{ scale: 0.95 }}
                                        >
                                            <div className="font-mono text-xs">{indent.icon}</div>
                                        </motion.button>
                                    ))}
                                </div>
                            </motion.div>
                        </div>

                        {/* Second Row - 3 columns */}
                        <div className="grid grid-cols-3 gap-3">
                            {/* Line Height */}
                            <motion.div 
                                className="space-y-2"
                                initial={{ opacity: 0, y: 10 }}
                                animate={{ opacity: 1, y: 0 }}
                                transition={{ delay: 0.5 }}
                            >
                                <div className="flex items-center gap-1">
                                    <svg className="w-3 h-3 text-gray-600 dark:text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 10h16M4 14h16M4 18h16" />
                                    </svg>
                                    <h3 className="font-medium text-gray-800 dark:text-gray-200 text-xs">Height</h3>
                                </div>
                                <div className="grid grid-cols-2 gap-1">
                                    {[
                                        { name: 'T', value: 'tight', icon: '≡' },
                                        { name: 'N', value: 'normal', icon: '⧻' },
                                        { name: 'R', value: 'relaxed', icon: '⩙' },
                                        { name: 'L', value: 'loose', icon: '⩚' }
                                    ].map((height) => (
                                        <motion.button
                                            key={height.value}
                                            onClick={() => setSettings({...settings, lineHeight: height.value})}
                                            className={`p-1 rounded border transition-all duration-200 ${
                                                settings.lineHeight === height.value
                                                    ? 'border-blue-500 bg-blue-50/80 dark:bg-blue-900/30 text-blue-600 dark:text-blue-400'
                                                    : 'border-gray-200/50 dark:border-gray-600/50 hover:border-gray-300 dark:hover:border-gray-500 bg-white/50 dark:bg-gray-700/50'
                                            }`}
                                            title={height.name}
                                            whileHover={{ scale: 1.05 }}
                                            whileTap={{ scale: 0.95 }}
                                        >
                                            <div className="text-xs">{height.icon}</div>
                                        </motion.button>
                                    ))}
                                </div>
                            </motion.div>

                            {/* Paragraph Spacing */}
                            <motion.div 
                                className="space-y-2"
                                initial={{ opacity: 0, y: 10 }}
                                animate={{ opacity: 1, y: 0 }}
                                transition={{ delay: 0.6 }}
                            >
                                <div className="flex items-center gap-1">
                                    <svg className="w-3 h-3 text-gray-600 dark:text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 12h.01M12 12h.01M16 12h.01" />
                                    </svg>
                                    <h3 className="font-medium text-gray-800 dark:text-gray-200 text-xs">Space</h3>
                                </div>
                                <div className="grid grid-cols-2 gap-1">
                                    {[
                                        { name: '0', value: '0', icon: '▬' },
                                        { name: '1', value: '0.25em', icon: '▬▬' },
                                        { name: '2', value: '0.5em', icon: '▬ ▬' },
                                        { name: '3', value: '1em', icon: '▬  ▬' }
                                    ].map((spacing) => (
                                        <motion.button
                                            key={spacing.value}
                                            onClick={() => setSettings({...settings, paragraphSpacing: spacing.value})}
                                            className={`p-1 rounded border transition-all duration-200 ${
                                                settings.paragraphSpacing === spacing.value
                                                    ? 'border-blue-500 bg-blue-50/80 dark:bg-blue-900/30 text-blue-600 dark:text-blue-400'
                                                    : 'border-gray-200/50 dark:border-gray-600/50 hover:border-gray-300 dark:hover:border-gray-500 bg-white/50 dark:bg-gray-700/50'
                                            }`}
                                            title={spacing.name}
                                            whileHover={{ scale: 1.05 }}
                                            whileTap={{ scale: 0.95 }}
                                        >
                                            <div className="font-mono text-xs">{spacing.icon}</div>
                                        </motion.button>
                                    ))}
                                </div>
                            </motion.div>

                            {/* Page Width */}
                            <motion.div 
                                className="space-y-2"
                                initial={{ opacity: 0, y: 10 }}
                                animate={{ opacity: 1, y: 0 }}
                                transition={{ delay: 0.7 }}
                            >
                                <div className="flex items-center gap-1">
                                    <svg className="w-3 h-3 text-gray-600 dark:text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 8V4m0 0h4M4 4l5 5m11-1V4m0 0h-4m4 0l-5 5" />
                                    </svg>
                                    <h3 className="font-medium text-gray-800 dark:text-gray-200 text-xs">Width</h3>
                                </div>
                                <div className="grid grid-cols-2 gap-1">
                                    {[
                                        { name: 'N', value: 'narrow', icon: '│' },
                                        { name: 'M', value: 'medium', icon: '┃' },
                                        { name: 'W', value: 'wide', icon: '█' },
                                        { name: 'F', value: 'full', icon: '■' }
                                    ].map((width) => (
                                        <motion.button
                                            key={width.value}
                                            onClick={() => setSettings({...settings, pageWidth: width.value})}
                                            className={`p-1 rounded border transition-all duration-200 ${
                                                settings.pageWidth === width.value
                                                    ? 'border-blue-500 bg-blue-50/80 dark:bg-blue-900/30 text-blue-600 dark:text-blue-400'
                                                    : 'border-gray-200/50 dark:border-gray-600/50 hover:border-gray-300 dark:hover:border-gray-500 bg-white/50 dark:bg-gray-700/50'
                                            }`}
                                            title={width.name}
                                            whileHover={{ scale: 1.05 }}
                                            whileTap={{ scale: 0.95 }}
                                        >
                                            <div className="text-xs">{width.icon}</div>
                                        </motion.button>
                                    ))}
                                </div>
                            </motion.div>
                        </div>

                        {/* Additional Settings - Compact */}
                        <motion.div 
                            className="space-y-3 pt-3 border-t border-gray-200/50 dark:border-gray-700/50"
                            initial={{ opacity: 0, y: 10 }}
                            animate={{ opacity: 1, y: 0 }}
                            transition={{ delay: 0.8 }}
                        >
                            <div className="grid grid-cols-2 gap-3">
                                {/* Scene Divider */}
                                <div className="space-y-1">
                                    <h4 className="text-xs font-medium text-gray-700 dark:text-gray-300">Scene Divider</h4>
                                    <select
                                        value={settings.sceneDivider}
                                        onChange={(e) => setSettings({...settings, sceneDivider: e.target.value})}
                                        className="w-full p-1 text-xs border border-gray-300/50 dark:border-gray-600/50 rounded bg-white/70 dark:bg-gray-700/70 backdrop-blur-sm"
                                    >
                                        <option value="asterisks">* * *</option>
                                        <option value="boxes">■ ■ ■</option>
                                        <option value="lines">— — —</option>
                                        <option value="dots">• • •</option>
                                    </select>
                                </div>

                                {/* Checkboxes */}
                                <div className="space-y-1">
                                    <label className="flex items-center gap-1 cursor-pointer">
                                        <input
                                            type="checkbox"
                                            checked={settings.chicagoStyle}
                                            onChange={(e) => setSettings({...settings, chicagoStyle: e.target.checked})}
                                            className="w-3 h-3 text-blue-600 rounded"
                                        />
                                        <span className="text-xs text-gray-600 dark:text-gray-400">Chicago</span>
                                    </label>
                                    <label className="flex items-center gap-1 cursor-pointer">
                                        <input
                                            type="checkbox"
                                            checked={settings.typewriterMode}
                                            onChange={(e) => setSettings({...settings, typewriterMode: e.target.checked})}
                                            className="w-3 h-3 text-blue-600 rounded"
                                        />
                                        <span className="text-xs text-gray-600 dark:text-gray-400">Typewriter</span>
                                    </label>
                                    <label className="flex items-center gap-1 cursor-pointer">
                                        <input
                                            type="checkbox"
                                            checked={settings.rememberPosition}
                                            onChange={(e) => setSettings({...settings, rememberPosition: e.target.checked})}
                                            className="w-3 h-3 text-blue-600 rounded"
                                        />
                                        <span className="text-xs text-gray-600 dark:text-gray-400">Remember</span>
                                    </label>
                                </div>
                            </div>
                        </motion.div>
                    </div>
                </div>

                {/* Footer - Compact */}
                <motion.div 
                    className="flex items-center justify-between p-3 border-t border-gray-200/50 dark:border-gray-700/50 bg-gray-50/50 dark:bg-gray-900/50 backdrop-blur-sm"
                    initial={{ opacity: 0, y: 10 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: 0.9 }}
                >
                    <div className="text-xs text-gray-500 dark:text-gray-400">
                        ●● = KDP + IS • ●○ = KDP • ○● = IS
                    </div>
                    <div className="flex gap-2">
                        <motion.button
                            onClick={handleCancel}
                            className="px-3 py-1 text-xs text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200 transition-colors rounded hover:bg-gray-100/50 dark:hover:bg-gray-800/50"
                            whileHover={{ scale: 1.05 }}
                            whileTap={{ scale: 0.95 }}
                        >
                            Cancel
                        </motion.button>
                        <motion.button
                            onClick={handleApply}
                            className="px-4 py-1 text-xs bg-blue-600 hover:bg-blue-700 text-white rounded transition-colors font-medium shadow-md"
                            whileHover={{ scale: 1.05, boxShadow: "0 4px 12px rgba(59, 130, 246, 0.3)" }}
                            whileTap={{ scale: 0.95 }}
                        >
                            Apply
                        </motion.button>
                    </div>
                </motion.div>
